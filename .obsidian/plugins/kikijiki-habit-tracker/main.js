/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var m=(n,s)=>{for(var t in s)c(n,t,{get:s[t],enumerable:!0})},v=(n,s,t,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let i of b(s))!y.call(n,i)&&i!==t&&c(n,i,{get:()=>s[i],enumerable:!(e=T(s,i))||e.enumerable});return n};var x=n=>v(c({},"__esModule",{value:!0}),n);var E={};m(E,{default:()=>h});module.exports=x(E);var a=require("obsidian"),p="kikijiki-habit-tracker-view",S={tagPrefix:"habit",habits:[]},h=class extends a.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new o(this.app,this)),this.registerView(p,t=>new u(t,this)),this.addCommand({id:"open-panel",name:"Open panel",callback:()=>{this.activateView()}}),this.registerEvent(this.app.workspace.on("active-leaf-change",()=>{var e;let t=(e=this.app.workspace.getLeavesOfType(p)[0])==null?void 0:e.view;t&&t.render()}))}async activateView(){let t=this.app.workspace.getRightLeaf(!1);t||(t=this.app.workspace.getRightLeaf(!0)),t&&(t.setViewState({type:p,active:!0}),this.app.workspace.revealLeaf(t))}onunload(){}async loadSettings(){this.settings=Object.assign({},S,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},o=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new a.Setting(t).setName("Tag prefix").setDesc("Prefix for tags, the final tag will be <prefix>/<habit>.").addText(e=>e.setPlaceholder("Enter tag prefix").setValue(this.plugin.settings.tagPrefix).onChange(async i=>{this.plugin.settings.tagPrefix=i,await this.plugin.saveSettings()})),new a.Setting(t).setName("Habits").setDesc("List of habits that will appear in the panel."),this.plugin.settings.habits.forEach((e,i)=>{new a.Setting(t).setName(`Habit ${i+1}`).addText(g=>g.setValue(e).onChange(async r=>{this.plugin.settings.habits[i]=r,await this.plugin.saveSettings()})).addButton(g=>{g.setButtonText("Remove"),g.onClick(async()=>{this.plugin.settings.habits.splice(i,1),await this.plugin.saveSettings(),this.display()})})}),new a.Setting(t).addButton(e=>{e.setButtonText("Add habit"),e.onClick(()=>{this.plugin.settings.habits.push(""),this.display()})})}},u=class extends a.ItemView{constructor(t,e){super(t);this.settings=[];this.currentFile=null;this.plugin=e}getViewType(){return p}getDisplayText(){return"Habit tracker"}getIcon(){return"checkbox-glyph"}async onOpen(){this.render()}async onClose(){this.clearSettings()}clearSettings(){this.settings.forEach(t=>t.settingEl.remove()),this.settings=[]}async render(){var l;let{contentEl:t}=this,e=this.app.workspace.getActiveFile();if((e==null?void 0:e.path)===this.currentFile)return;if(this.currentFile=(l=e==null?void 0:e.path)!=null?l:null,t.empty(),this.clearSettings(),!e){t.setText("No file is open");return}let i=this.app.metadataCache.getFileCache(e),r=((i==null?void 0:i.frontmatter)||{}).tags||[];this.plugin.settings.habits.forEach(d=>{let f=`${this.plugin.settings.tagPrefix}/${d}`,w=new a.Setting(t).setName(d).addToggle(k=>{k.setValue(r.includes(f)),k.onChange(this.createToggleHandler(e,f))});this.settings.push(w)})}createToggleHandler(t,e){return async i=>{await this.app.fileManager.processFrontMatter(t,g=>{let r=g.tags||[];i&&!r.includes(e)?r.push(e):!i&&r.includes(e)&&(r=r.filter(l=>l!==e)),g.tags=r})}}};

/* nosourcemap */