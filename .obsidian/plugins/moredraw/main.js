/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MoreDrawPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var IframeViewType = "moredraw-iframe-view";
var MoreDrawPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isIframeOpen = false;
  }
  // 用于跟踪 iframe 是否已打开
  async onload() {
    const customIconSvg = `
     <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 32 32" enable-background="new 0 0 32 32" xml:space="preserve" fill="currentColor" ><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path fill="currentColor" stroke="currentColor" d="M32,19.5v-18C32,0.673,31.327,0,30.5,0h-29C0.673,0,0,0.673,0,1.5v18C0,20.327,0.673,21,1.5,21h4.002 L0.549,31.283c-0.12,0.249-0.015,0.547,0.234,0.667C0.853,31.984,0.927,32,1,32c0.186,0,0.365-0.104,0.451-0.283l5-10.382 C6.503,21.226,6.506,21.109,6.479,21h20.038c-0.024,0.096-0.028,0.198,0.01,0.297l4,10.382c0.077,0.199,0.266,0.32,0.467,0.32 c0.06,0,0.121-0.011,0.18-0.033c0.258-0.1,0.386-0.389,0.287-0.646L27.484,21H30.5C31.327,21,32,20.327,32,19.5z M1,19.5v-18 C1,1.224,1.224,1,1.5,1h29C30.776,1,31,1.224,31,1.5v18c0,0.276-0.224,0.5-0.5,0.5h-29C1.224,20,1,19.776,1,19.5z"></path> </g> </g></svg>
    `;
    (0, import_obsidian.addIcon)("moredraw-icon", customIconSvg);
    this.addRibbonIcon("moredraw-icon", "MoreDraw", () => {
      this.toggleIframeView();
    });
    this.registerView(
      IframeViewType,
      (leaf) => new MoreDrawIframeView(leaf)
    );
  }
  // 激活 iframe 视图
  async activateIframeView() {
    const { workspace } = this.app;
    const leaf = workspace.getRightLeaf(false);
    if (leaf) {
      await leaf.setViewState({
        type: IframeViewType
      });
      workspace.revealLeaf(leaf);
    }
  }
  // 切换 iframe 视图（打开或关闭）
  async toggleIframeView() {
    const { workspace } = this.app;
    const rightSplit = this.app.workspace.rightSplit;
    if (rightSplit.collapsed)
      rightSplit.expand();
    const existingLeaf = workspace.getLeavesOfType(IframeViewType).first();
    if (existingLeaf) {
      workspace.revealLeaf(existingLeaf);
      this.isIframeOpen = true;
    } else {
      const leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({
          type: IframeViewType
        });
        workspace.revealLeaf(leaf);
        this.isIframeOpen = true;
      }
    }
  }
};
var MoreDrawIframeView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
    this.ready = false;
    this.iframe = null;
  }
  getIcon() {
    return "moredraw-icon";
  }
  // 返回视图类型
  getViewType() {
    return IframeViewType;
  }
  // 返回视图标题
  getDisplayText() {
    return "MoreDraw";
  }
  // 视图打开时的逻辑
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const query = new URLSearchParams({
      lang: getLanguage(),
      utm_source: "obsidian",
      obsidian_version: this.getObsidianVersion()
    });
    const iframe = container.createEl("iframe", {
      attr: {
        src: "https://moredraw.com/app/board/new?" + query.toString(),
        // src:
        // 	"http://192.168.110.189:5173/app/board/new?" +
        // 	query.toString(),
        frameborder: "0",
        class: "moredraw-iframe"
      }
    });
    this.iframe = iframe;
    container.win.onmessage = (event) => {
      if (event.data && event.data == "ready") {
        this.ready = true;
        this.onReady();
      }
      if (event.data.action === "navigate") {
        iframe.src = event.data.url;
      }
    };
  }
  onReady() {
    this.postMessage({
      type: "init",
      data: {
        obsidian: {
          version: this.getObsidianVersion()
        }
      }
    });
  }
  postMessage(data) {
    var _a;
    if (this.iframe && this.ready) {
      (_a = this.iframe.contentWindow) == null ? void 0 : _a.postMessage(data, "*");
    }
  }
  // 视图关闭时的逻辑
  async onClose() {
  }
  getObsidianVersion() {
    const userAgent = navigator.userAgent;
    const match = userAgent.match(/Obsidian\/([\d.]+)/);
    if (match) {
      return match[1];
    }
    return "unknown";
  }
};
function getLanguage() {
  const locale = import_obsidian.moment.locale();
  const arr = locale.split("-");
  if (arr[1]) {
    arr[1] = arr[1].toString().toUpperCase();
  }
  return arr.join("-");
}


/* nosourcemap */