/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var F=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var E=(r,o)=>{for(var e in o)F(r,e,{get:o[e],enumerable:!0})},D=(r,o,e,n)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of b(o))!I.call(r,s)&&s!==e&&F(r,s,{get:()=>o[s],enumerable:!(n=x(o,s))||n.enumerable});return r};var P=r=>D(F({},"__esModule",{value:!0}),r);var O={};E(O,{default:()=>C});module.exports=P(O);var d=require("obsidian");var w=class{constructor(o,e,n){let{nodesPerRow:s,nodeWidth:a,nodeHeight:i,nodeSpacing:t}=n;this.id=`node-${o}`,this.x=o%s*(a+t),this.y=Math.floor(o/s)*(i+t),this.width=a,this.height=i,this.type="file",this.file=e}toJSON(){return{id:this.id,x:this.x,y:this.y,width:this.width,height:this.height,type:this.type,file:this.file}}},m=w;var c=require("obsidian");var p=r=>{let o=r.replace(".canvas","").match(/^(.*?)(?: (\d+))?$/);if(!o)throw new Error("Invalid filename format");return{baseName:o[1],number:o[2]?parseInt(o[2]):null,ext:".canvas"}},v=r=>r.endsWith(".canvas")?r:`${r}.canvas`;function W(r,o){let e=this.app.vault.getFolderByPath(r);if(!e)return[];let n=[],s=a=>{var i;a instanceof c.TFile?a.extension==="canvas"&&a.path.includes(o)&&n.push(a):(i=a.children)==null||i.forEach(t=>s(t))};return s(e),n}function A(r,o){let e=v(o),n=p(e),s=W(r,n.baseName),a=0;s.forEach(t=>{var g;a=(g=p(t.name).number)!=null?g:1});let i=a===0?e:`${n.baseName} ${a+1}${n.ext}`;return`${r}/${i}`}async function T(r,o,e,n,s){if(e.length===0){new c.Notice("The folder is empty!");return}let a=A(o,n),i={nodes:e.map((l,g)=>new m(g,l.path,s)),edges:[]},t=await r.vault.create(a,JSON.stringify(i,null,2));s.openOnCreate&&await r.workspace.openLinkText(a,"",!0),t?new c.Notice(`Canvas created at ${a}`):new c.Notice("Failed to create a Canvas file.")}var u=require("obsidian"),f=class extends u.SuggestModal{constructor(e,n){super(e);this.onSelect=n}getSuggestions(e){let n=[],s=i=>{n.push(i),i.children.forEach(t=>{t instanceof u.TFolder&&s(t)})},a=this.app.vault.getRoot().children.filter(i=>i instanceof u.TFolder);for(let i of a)s(i);return n.filter(i=>i.path.toLowerCase().includes(e.toLowerCase()))}renderSuggestion(e,n){n.createEl("div",{text:e.path})}onChooseSuggestion(e){this.onSelect(e)}};var h={nodesPerRow:4,openOnCreate:!0,canvasFileName:`Canvas-${Date.now()}.canvas`,watchFolder:!0,nodeWidth:250,nodeHeight:100,nodeSpacing:20,maxWidth:1e3,maxHeight:1e3,maxSpacing:100},M="foldercanvas",y="generate-canvas-from-folder",R="Generate Canvas from folder",H=`${M}:${y}`,C=class extends d.Plugin{async onload(){await this.loadSettings(),this.addRibbonIcon("palette","Folder Canvas",e=>this.triggerCommandById()),this.addSettingTab(new N(this.app,this)),this.addCommand({id:y,name:R,callback:async()=>{new f(this.app,async e=>{try{await this.generateCanvas(e)}catch(n){new d.Notice("Failed to generate a Canvas file. Please try again."),console.error(n)}}).open()}}),this.registerEvent(this.app.workspace.on("editor-menu",(e,n,s)=>{e.addItem(a=>{a.setTitle("Generate a Canvas view").setIcon("palette").onClick(async()=>this.triggerCommandById())})})),this.registerEvent(this.app.workspace.on("file-menu",(e,n)=>{e.addItem(s=>{s.setTitle("Generate a Canvas view").setIcon("palette").onClick(async()=>this.triggerCommandById())})})),this.app.workspace.onLayoutReady(()=>{this.registerEvent(this.app.vault.on("create",async e=>{e instanceof d.TFile&&e.extension==="md"&&setTimeout(()=>this.updateCanvas("add",e),100)})),this.registerEvent(this.app.vault.on("delete",async e=>{e instanceof d.TFile&&e.extension==="md"&&this.updateCanvas("remove",e)})),this.registerEvent(this.app.vault.on("rename",async(e,n)=>{e instanceof d.TFile&&e.extension==="md"&&setTimeout(()=>this.updateCanvas("rename",e,n),100)}))})}async loadSettings(){this.settings=Object.assign({},h,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async generateCanvas(e){let n=this.settings.canvasFileName,s=e.children.filter(a=>a instanceof d.TFile&&a.extension==="md");await T(this.app,e.path,s,n,this.settings)}async getCurrentCanvasFile(e){let n=e.path.split("/")[0],s=this.app.vault.getFolderByPath(n);if(!s)return;let a=[],i=t=>{var l;if(t instanceof d.TFile){let g=v(this.settings.canvasFileName),S=p(g);t.extension==="canvas"&&t.path.includes(S.baseName)&&a.push(t)}else(l=t.children)==null||l.forEach(g=>i(g))};return i(s),a==null?void 0:a.pop()}async updateCanvas(e,n,s){if(!this.settings.watchFolder)return;let a=await this.getCurrentCanvasFile(n);if(!a)return;let i=JSON.parse(await this.app.vault.read(a));if(e==="add"){if(a.parent){let t=a.parent.children.filter(g=>g.extension==="md").length,l=new m(t,n.path,this.settings);i.nodes.push(l.toJSON())}}else e==="remove"?i.nodes=i.nodes.filter(t=>!t.file.endsWith(n.path)):e==="rename"&&s&&i.nodes.forEach(t=>{t.file===s&&(t.file=n.path)});await this.app.vault.modify(a,JSON.stringify(i,null,2)),new d.Notice("Canvas updated.")}async triggerCommandById(){this.app.commands.executeCommandById(H)}},N=class extends d.PluginSettingTab{constructor(e,n){super(e,n);this.plugin=n}display(){let{containerEl:e}=this;e.empty(),new d.Setting(e).setName("Canvas filename pattern").setDesc("Specify the default filename for a new canvas. (Cannot contain '/' or '\\')").addText(t=>t.setPlaceholder("Canvas-<Date>.canvas").setValue(this.plugin.settings.canvasFileName).onChange(async l=>{/[\\/]/.test(l)?(new d.Notice("Invalid characters: '/' and '\\' are not allowed."),t.setValue(this.plugin.settings.canvasFileName)):(this.plugin.settings.canvasFileName=l||h.canvasFileName,await this.plugin.saveSettings())})),new d.Setting(e).setName("Open Canvas on creation").setDesc("Automatically open the new Canvas file after it is created.").addToggle(t=>t.setValue(this.plugin.settings.openOnCreate).onChange(async l=>{this.plugin.settings.openOnCreate=l,await this.plugin.saveSettings()})),new d.Setting(e).setName("Watch Canvas folder").setDesc("Automatically update the Canvas when files are added or removed from the folder.").addToggle(t=>t.setValue(this.plugin.settings.watchFolder).onChange(async l=>{this.plugin.settings.watchFolder=l,await this.plugin.saveSettings()}));let n=new d.Setting(e).setName(`Nodes per row: ${this.plugin.settings.nodesPerRow}`).setDesc("Number of nodes to display per row in the Canvas.").addSlider(t=>t.setLimits(1,10,1).setValue(this.plugin.settings.nodesPerRow).onChange(async l=>{this.plugin.settings.nodesPerRow=l,await this.plugin.saveSettings(),n.setName(`Nodes per row: ${l}`)})),s;new d.Setting(e).setName("Node width").setDesc("Set the width of nodes (default: 250, max: 1000).").addText(t=>{t.setValue(this.plugin.settings.nodeWidth.toString()).onChange(async l=>{let g=this.validateInput(l,this.plugin.settings.maxWidth);this.plugin.settings.nodeWidth=g,await this.plugin.saveSettings()}),s=t.inputEl}).addButton(t=>{t.setButtonText("Reset").setTooltip("Reset to default").onClick(async()=>{this.plugin.settings.nodeWidth=h.nodeWidth,await this.plugin.saveSettings(),s.value=h.nodeWidth.toString()})});let a;new d.Setting(e).setName("Node height").setDesc("Set the height of nodes (default: 100, max: 1000).").addText(t=>{t.setValue(this.plugin.settings.nodeHeight.toString()).onChange(async l=>{let g=this.validateInput(l,this.plugin.settings.maxWidth);this.plugin.settings.nodeHeight=g,await this.plugin.saveSettings()}),a=t.inputEl}).addButton(t=>{t.setButtonText("Reset").setTooltip("Reset to default").onClick(async()=>{this.plugin.settings.nodeHeight=h.nodeHeight,await this.plugin.saveSettings(),a.value=h.nodeHeight.toString()})});let i;new d.Setting(e).setName("Node spacing").setDesc("Set the spacing between nodes (default: 20, max: 100).").addText(t=>{t.setValue(this.plugin.settings.nodeSpacing.toString()).onChange(async l=>{let g=this.validateInput(l,this.plugin.settings.maxWidth);this.plugin.settings.nodeSpacing=g,await this.plugin.saveSettings()}),i=t.inputEl}).addButton(t=>{t.setButtonText("Reset").setTooltip("Reset to default").onClick(async()=>{this.plugin.settings.nodeSpacing=h.nodeSpacing,await this.plugin.saveSettings(),i.value=h.nodeSpacing.toString()})})}validateInput(e,n){let s=parseInt(e,10);return isNaN(s)&&(s=0),Math.min(s,n)}};

/* nosourcemap */